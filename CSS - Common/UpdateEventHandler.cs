using Microsoft.SqlServer.Server;
using Sandbox.ModAPI.Ingame;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace CSS_Common {
	/// <summary>
	/// Represents the method that will handle an event when the event provides data.
	/// (Space Engineers Prohibits mscorlib's version 🤷)
	/// </summary>
	/// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
	/// <param name="sender">The source of the event.</param>
	/// <param name="e">An object that contains the event data.</param>
	public delegate void EventHandler<TEventArgs>(object sender, TEventArgs e);

	/// <summary>
	/// Encapsulates arguments passed to UpdateEventHandlers.
	/// </summary>
	public class UpdateEventArgs : EventArgs {
		public readonly string argument;
		public readonly UpdateType updateSource;

		public UpdateEventArgs(string argument, UpdateType updateSource) {
			this.argument = argument;
			this.updateSource = updateSource;
		}
	}

	/// <summary>
	/// Allows easily subscribing event handlers.
	/// UpdateNone events will be called on every update.
	/// Note: this does not set Runtime.UpdateFrequency/
	/// </summary>
	public class UpdateEventHandlers {
		/// <summary>
		/// Array of EventHandlers to make automatic invocation require less repetitive code typing.
		/// </summary>
		private List<object> UpdateEventHandlerActions;
		/// <summary>
		/// Event handers here will not be executed more than once per cycle.
		/// </summary>
		public Dictionary<EventHandler<UpdateEventArgs>, UpdateType> Subscribers = new Dictionary<EventHandler<UpdateEventArgs>, UpdateType>();

		/// <summary>
		/// Subscribe to this event handler. Subscribing to multiple events may lead to multiple invocations in one cycle.
		/// </summary>
		public event EventHandler<UpdateEventArgs>
			UpdateNone, //
			UpdateTerminal, //1
			UpdateTrigger, //2
			UpdateMod, //8
			UpdateScript, //16
			Update1, //32
			Update10, //64
			Update100, //128
			UpdateOnce, //256
			UpdateIGC; //512

		private void RefreshList() {
			UpdateEventHandlerActions = new List<object> {
				UpdateNone, //
				UpdateTerminal, //1
				UpdateTrigger, //2
				UpdateMod, //8
				UpdateScript, //16
				Update1, //32
				Update10, //64
				Update100, //128
				UpdateOnce, //256
				UpdateIGC //512
			};
		}

		/// <summary>
		/// Constructs UpdateEventHandlerActions array.
		/// </summary>
		public UpdateEventHandlers() {
			RefreshList();
		}

		/// <summary>
		/// Run subscribed event handlers.
		/// </summary>
		/// <param name="argument">Main's argument parameter</param>
		/// <param name="updateSource">Main's updateSource</param>
		public void CallUpdateEventHandlers(string argument, UpdateType updateSource) {
			UpdateEventArgs Args = new UpdateEventArgs(argument, updateSource);
			RefreshList();
			((EventHandler<UpdateEventArgs>)UpdateEventHandlerActions[0])?.Invoke(this, Args); // Will always be called
			for (int i = 1, flag = 1; i < 11; i++, flag <<= 1) {
				if (flag == 0x4) continue; // Apparently it's not defined in UpdateType 🤷
				if (updateSource.HasFlag((UpdateType)flag)) {
					UpdateNone?.Invoke(this, new UpdateEventArgs(string.Format("Flag Passed: {0} ({1})", flag.ToString(), ((UpdateType)flag).ToString()), updateSource));
					((EventHandler<UpdateEventArgs>)UpdateEventHandlerActions[i])?.Invoke(this, Args);
				}
			}
			foreach (KeyValuePair<EventHandler<UpdateEventArgs>, UpdateType> EH in Subscribers.Where(pair => updateSource.HasFlag(pair.Value))) {
				EH.Key.Invoke(this, Args);
			}
		}
	}
}
